package com.kevel.apso.caching

import java.util.concurrent.atomic.{AtomicBoolean, AtomicInteger}

import scala.concurrent.Future
import scala.concurrent.duration._
import scala.util.Random

import org.specs2.concurrent.ExecutionEnv
import org.specs2.mutable.Specification

class MemoizeFnWithCaffeineSpec(implicit ee: ExecutionEnv) extends BaseMemoizeFnSpec()(ee) {
  def newConf(size: Option[Long] = None, ttl: Option[FiniteDuration] = None) = {
    config.Cache.Caffeine(size, ttl)
  }
  lazy val underlyingCacheName = "Caffeine"
}

abstract class BaseMemoizeFnSpec(implicit ee: ExecutionEnv) extends Specification {

  def newConf(size: Option[Long] = None, ttl: Option[FiniteDuration] = None): config.Cache
  def underlyingCacheName: String

  val timeout = 15.seconds

    [#
  def buildSyncFn1(flag: AtomicInteger) = ([#p0: String#]) => {
    val n = flag.incrementAndGet()
    n.toString
  }

  def buildAsyncFn1(flag: AtomicBoolean) = ([#p0: String#]) => {
    Future {
      Thread.sleep(Random.nextInt(5##0##0))
      flag.getAndSet(!flag.get()).toString
    }
  }#
  ]

  s"An MemoizeFn using $underlyingCacheName" should {

    "work with sync functions" in {
      [#
      "correctly cache functions with 1 arguments" in {
        val cacheConf = newConf(Some(3), None)
        val flag = new AtomicInteger(##0)
        val cacheableFunction = buildSyncFn1(flag)
        val cachedFn = cacheableFunction.cached(cacheConf)

        cachedFn([#"o0"#]) must beEqualTo("##1")
        flag.get() must beEqualTo(##1)

        cachedFn([#"o1"#]) must beEqualTo("##2")
        flag.get() must beEqualTo(##2)

        cachedFn([#"o2"#]) must beEqualTo("3")
        flag.get() must beEqualTo(3)

        cachedFn([#"o0"#]) must beEqualTo("##1")
        flag.get() must beEqualTo(3)

        cachedFn([#"o1"#]) must beEqualTo("##2")
        flag.get() must beEqualTo(3)

        cachedFn([#"o2"#]) must beEqualTo("3")
        flag.get() must beEqualTo(3)
      }#
      ]

      [#
      "not cache functions with 1 arguments if configured with size ##0" in {
        val cacheConf = newConf(Some(##0), Some(##0.seconds))
        val flag = new AtomicInteger(##0)
        val cacheableFunction = buildSyncFn1(flag)
        val cachedFn = cacheableFunction.cached(cacheConf)

        cachedFn([#"o0"#]) must beEqualTo("##1")
        flag.get() must beEqualTo(##1)

        cachedFn([#"o0"#]) must beEqualTo("##2").eventually
        flag.get() must beEqualTo(##2)
      }#
      ]
    }

    "work with Future functions" in {
      [#
      "correctly cache functions with 1 arguments " in {
        val cacheConf = newConf(Some(3), None)
        val flag = new AtomicBoolean(true)
        val cacheableFunction = buildAsyncFn1(flag)
        val cachedFn = cacheableFunction.cachedF(cacheConf)

        cachedFn([#"o0"#]) must beEqualTo("true").awaitFor(timeout)
        flag.get() must beFalse

        cachedFn([#"o1"#]) must beEqualTo("false").awaitFor(timeout)
        flag.get() must beTrue

        cachedFn([#"o2"#]) must beEqualTo("true").awaitFor(timeout)
        flag.get() must beFalse

        cachedFn([#"o0"#]) must beEqualTo("true").awaitFor(timeout)
        flag.get() must beFalse

        cachedFn([#"o1"#]) must beEqualTo("false").awaitFor(timeout)
        flag.get() must beFalse

        cachedFn([#"o2"#]) must beEqualTo("true").awaitFor(timeout)
        flag.get() must beFalse
      }#
      ]

      [#
      "not cache functions with 1 arguments if configured with size ##0" in {
        val cacheConf = newConf(Some(##0), Some(##0.seconds))
        val flag = new AtomicBoolean(true)
        val cacheableFunction = buildAsyncFn1(flag)
        val cachedFn = cacheableFunction.cachedF(cacheConf)

        cachedFn([#"o0"#]) must beEqualTo("true").awaitFor(timeout)
        flag.get() must beFalse

        cachedFn([#"o0"#]) must beEqualTo("false").awaitFor(timeout).eventually
        flag.get() must beTrue
      }#
      ]
    }
  }
}
