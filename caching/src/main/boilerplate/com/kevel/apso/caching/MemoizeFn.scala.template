package com.kevel.apso.caching

import com.github.blemale.scaffeine.Scaffeine

import com.github.blemale.scaffeine.{AsyncLoadingCache, LoadingCache}

import scala.concurrent.Future

import MemoizeFn._

/**
  * Provides a memoization mechanism for synchronous functions with 0 arguments using Caffeine.
  *
  * Provides a corresponding `apply()` method that follows the signature of the provided `fn` function, but is
  * memoized using Caffeine.
  */
sealed trait SyncMemoizeFn0[V] extends (() => V) {
  protected def cacheConfig: config.Cache
  protected def fn: Unit => V
  private lazy val cache: LoadingCache[Unit, V] = MemoizeFn.builder(cacheConfig).build(fn)
  override def apply(): V = cache.get(())
}

/**
  * Provides a memoization mechanism for asynchronous functions with 0 arguments using Caffeine.
  *
  * Provides a corresponding `apply()` method that follows the signature of the provided `fn` function, but is
  * memoized using Caffeine.
  */
sealed trait AsyncMemoizeFn0[V] extends (() => Future[V]) {
  protected def cacheConfig: config.Cache
  protected def fn: Unit => Future[V]
  private lazy val cache: AsyncLoadingCache[Unit, V] = MemoizeFn.builder(cacheConfig).buildAsyncFuture(fn)
  override def apply(): Future[V] = cache.get(())
}

[#
/**
  * Provides a memoization mechanism for synchronous functions with 1 arguments using Caffeine.
  *
  * Provides a corresponding `apply()` method that follows the signature of the provided `fn` function, but is
  * memoized using Caffeine.
  */
sealed trait SyncMemoizeFn1[[#I0#], V] extends Function1[[#I0#], V] {
  def cacheConfig: config.Cache
  def fn: ([#I0#]) => V
  private lazy val cache: LoadingCache[([#I0#]), V] = MemoizeFn.builder(cacheConfig).build(fn.tupled)
  override def apply([#i0: I0#]): V = cache.get(([#i0#]))
}#
]

[#
/**
  * Provides a memoization mechanism for synchronous functions with 1 arguments using Caffeine.
  *
  * Provides a corresponding `apply()` method that follows the signature of the provided `fn` function, but is
  * memoized using Caffeine.
  */
sealed trait AsyncMemoizeFn1[[#I0#], V] extends Function1[[#I0#], Future[V]] {
  def cacheConfig: config.Cache
  def fn: ([#I0#]) => Future[V]
  private lazy val cache: AsyncLoadingCache[([#I0#]), V] = MemoizeFn.builder(cacheConfig).buildAsyncFuture(fn.tupled)
  override def apply([#i0: I0#]): Future[V] = cache.get(([#i0#]))
}#
]

object MemoizeFn {
  private[caching] def builder(conf: config.Cache): Scaffeine[Any, Any] = {
    val withSize = conf.maximumSize.fold(Scaffeine())(Scaffeine().maximumSize)
    val withTimeToLive = conf.timeToLive.fold(withSize)(withSize.expireAfterWrite)
    withTimeToLive
  }

  private[caching] implicit class Function1Ops[A, B](f: A => B) {
    def tupled: A => B = f
  }

  private[caching] def sync[V](function: () => V, conf: config.Cache): SyncMemoizeFn0[V] = new SyncMemoizeFn0[V] {
    def cacheConfig: config.Cache = conf
    def fn: Unit => V = _ => function()
  }
[#
  private[caching] def sync[[#I0#], V](function: ([#I0#]) => V, conf: config.Cache): SyncMemoizeFn1[[#I0#], V] = new SyncMemoizeFn1[[#I0#], V] {
    def cacheConfig: config.Cache = conf
    def fn: ([#I0#]) => V = function
  }#
]

  private[caching] def async[V](function: () => Future[V], conf: config.Cache): AsyncMemoizeFn0[V] = new AsyncMemoizeFn0[V] {
    def cacheConfig: config.Cache = conf
    def fn: Unit => Future[V] = _ => function()
  }
[#
  private[caching] def async[[#I0#], V](function: ([#I0#]) => Future[V], conf: config.Cache): AsyncMemoizeFn1[[#I0#], V] = new AsyncMemoizeFn1[[#I0#], V] {
    def cacheConfig: config.Cache = conf
    def fn: ([#I0#]) => Future[V] = function
  }#
]
}
