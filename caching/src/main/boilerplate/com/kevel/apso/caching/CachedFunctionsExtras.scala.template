package com.kevel.apso.caching

import scala.concurrent.Future

/**
  * Provides extension methods `.cachedSync()` and `.cachedAsync()` for `FunctionN` types.
  */
trait CachedFunctionsExtras {
  final implicit class Fn0SyncCachingExtras[V](fn: Function0[V]) {
    final def cachedSync(conf: config.Cache): SyncMemoizeFn0[V] = {
      MemoizeFn.sync(fn, conf)
    }
  }
  [#
  final implicit class Fn1SyncCachingExtras[[#I0#], V](fn: Function1[[#I0#], V]) {
    final def cachedSync(conf: config.Cache): SyncMemoizeFn1[[#I0#], V] = {
      MemoizeFn.sync(fn, conf)
    }
  }#
  ]

  final implicit class Fn0AsyncCachingFExtras[V](fn: Function0[Future[V]]) {
    final def cachedAsync(conf: config.Cache): AsyncMemoizeFn0[V] = {
      MemoizeFn.async(fn, conf)
    }
  }
  [#
  final implicit class Fn1AsyncCachingExtras[[#I0#], V](fn: Function1[[#I0#], Future[V]]) {
    final def cachedAsync(conf: config.Cache): AsyncMemoizeFn1[[#I0#], V] = {
      MemoizeFn.async(fn, conf)
    }
  }#
  ]
}
